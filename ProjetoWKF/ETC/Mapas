http://grails.asia/groovy-map-tutorial

/* Declaração */

Map testandoMapas = [:]

testandoMapas = [
    '(CF) Código de rede': "",
    '(CF) XPTO': "",
    '(CF) NF compra': "",
    serviceOrderCode: "",
    notes: "",
    informedDefectCode: ""
]

println "Antes de adicionar valores"
println testandoMapas
println "\n"

/* Adicionando / atualizando valores (Mesmo jeito)*/

testandoMapas['(CF) Código de rede'] = "testeCódigoDeRedes"
testandoMapas.put('(CF) XPTO', "Outro teste adicionando valores ao mapa")
testandoMapas.weight = 500
testandoMapas.'(CF) NF compra' = 'teste NF compra'
testandoMapas << [notes: "Bem observado"]

println "Após adicionar valores"
println testandoMapas
println "\n"

/* Removendo chaves e valores */

testandoMapas.remove('(CF) Código de rede')
testandoMapas -= ['(CF) XPTO':'Outro teste adicionando valores ao mapa']

println "Após remover determinadas chaves e valores"
println testandoMapas
println "\n"

/* Recuperando valores do mapa */

println "Recuperando valores do mapas"

println "(CF) Código de rede: ${testandoMapas.get('(CF) Código de rede')}"
println "(CF) XPTO: ${testandoMapas['(CF) XPTO']}"
println "(CF) NF compra: ${testandoMapas.'(CF) NF compra'}"
println "serviceOrderCode: ${testandoMapas.serviceOrderCode}"
println "notes: ${testandoMapas.notes}"
println "informedDefectCode: ${testandoMapas.informedDefectCode}"

println "\n"

/* Coletando entradas */

// Podemos criar um mapa apartir de uma lista

List listaDeFrutas = ["maça", "banana", "uva"]
Map mapaDeFrutas = listaDeFrutas.collectEntries{[(it):it]}

println "Mapa de frutas coletadas apartir de uma lista"
println mapaDeFrutas
println "\n"

// Verificando quantos elementos atingem determinada condição

def verificandoQuantosElementosAtingemACondicaoAtravesDeUmMapa = mapaDeFrutas.count {key, value ->
    value > 4
}

println verificandoQuantosElementosAtingemACondicaoAtravesDeUmMapa
println "\n"

// Unindo mapas

def map1 = [p1:100, p2:200]
def map2 = [p3:300, p4:400]
def map3 = map1 + map2
println "${map3}"
println "\n"

// Interseção de mapas (Onde os elementos se conectam (Elementos iguais, chave e valor))

def map4 = [p1:100, p2:200, p3:300, p4:400, p5:500]
def map5 = [p4:400, p5:500, p6:600, p7:700]
def map6 = map1.intersect(map2)
println "${map3}"
println "\n"

// Recuperando todas chaves do mapa como uma lista

def map7 = [p1:100, p2:200, p3:300, p4:400, p5:500]
println "${map1.keySet()}"
println "\n"

// Pegando as menores entradas do mapa (Numérico)
def map9 = [p56:1010, p12:2100, p23:3100, p43:4100, p54:5010]

println "${map1.min {it.key}}"
println "${map1.min {it.value}}"
println "\n"

// Pegando as maiores entradas do mapa (Numérico)

def map10 = [p1:100, p2:200, p3:300, p4:400, p5:500]
println "${map1.max {it.key}}"
println "${map1.max {it.value}}"





